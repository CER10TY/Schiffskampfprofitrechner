using System.Windows;
using System.IO;
using System.Linq;
using System.Windows.Controls;
using System.Collections.Generic;
using System.Windows.Media;

namespace SKPR
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        // Create Factions with single constructor
        private Faction Imperium = new Faction("Imperium");
        private Faction Rebellion = new Faction("Rebellion");

        public void InitializeFaction(Faction faction)
        {
            // Empty string is needed here to prevent NullReferenceException
            string line;

            // StreamReader to read textfile. Each ship has data stored on one line in text file.
            StreamReader shipReadout = new StreamReader("data/ShipReadouts.txt");
            while ((line = shipReadout.ReadLine()) != null)
            {
                // Data structure:
                // Ship Name.Ship Resources.Ship Faction
                // We split according to data structure, convert as needed.
                string[] splitLine = line.Split('.');
                string shipName = splitLine[0];
                int[] shipRes = splitLine[1].Split(',').Select(int.Parse).ToArray();
                string shipFaction = splitLine[2];
                if (shipFaction == faction.Name)
                {
                    // add this new ship to faction.Ships
                    faction.Ships.Add(new Ship(shipName, shipRes, shipFaction));
                }
            }
            // Close StreamReader
            shipReadout.Close();
        }

        public void UpdateText(Faction faction)
        {
            // This updates all labels (named lblShip1 to lblShip14) to include Ship name.
            for (int i = 1; i <= faction.Ships.Count; i++)
            {
                Label lbl = (Label)FindName(("lblShip" + i));
                lbl.Content = faction.Ships[i - 1].Name;
            }
        }

        public Faction ReturnFaction(string faction)
        {
            // Returns Faction based on selected CBoxItem.
            switch (faction)
            {
                // SelectedItem.ToString() for ComboBox returns Control Type + actual Item. I'm too lazy to strip.
                case "System.Windows.Controls.ComboBoxItem: Imperium":
                    return Imperium;
                case "System.Windows.Controls.ComboBoxItem: Rebellion":
                    return Rebellion;
            }
            return Imperium;
        }

        public List<int> CalculateResources(string[] resources)
        {
            // resources array references TextBox elements, as they always end with resource name.
            List<int> resWin = new List<int> { };
            foreach (string res in resources)
            {
                // Loop through each individual resource, adding together the same resource
                // .. from both Salvage and other gained Resources.
                TextBox TFtxt = (TextBox)FindName(("TF" + res));
                TextBox Restxt = (TextBox)FindName(("Res" + res));

                // Add to returned List<int>
                resWin.Add(int.Parse(TFtxt.Text) + int.Parse(Restxt.Text));
            }
            return resWin;
        }

        public List<int> CalculateShipLosses()
        {
            List<int> shipLoss = new List<int> { };
            return shipLoss;
        }

        public int CalculateProfit()
        {
            int profit = 0;
            return profit;
        }
        public MainWindow()
        {
            // Initializes both factions, then updates labels.
            InitializeComponent();
            InitializeFaction(Imperium);
            InitializeFaction(Rebellion);
            UpdateText(ReturnFaction(cBoxFaction.SelectedItem.ToString()));
        }

        private void cBoxFaction_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            // Updates labels.
            UpdateText(ReturnFaction(cBoxFaction.SelectedItem.ToString()));
        }

        private void btnBerechnen_Click(object sender, RoutedEventArgs e)
        {
            string[] resources = { "Dura", "Tiba", "Kris", "EZ" };
            lblProfit.Visibility = Visibility.Visible;
            List<int> resProfit = CalculateResources(resources);
            lblProfit.Visibility = Visibility.Hidden;

            foreach (string res in resources)
            {
                Label lbl = (Label)FindName(("lbl" + res + "Win"));
                TextBox winBox = (TextBox)FindName((res + "Win"));
                lbl.Visibility = Visibility.Visible;
                winBox.Visibility = Visibility.Visible;
            }
            for (int i = 0; i < resources.Count(); i++)
            {
                TextBox winBox = (TextBox)FindName((resources[i] + "Win"));
                winBox.Text = resProfit[i].ToString();
                if (resProfit[i] > 0)
                {

                }
            }
        }
    }
}
